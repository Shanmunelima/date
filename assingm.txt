import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Read data from Excel files into pandas dataframes
demographics_df = pd.read_excel('CustomerDemographics.xlsx')
behavior_df = pd.read_excel('CustomerBehaviorData.xlsx')
consumption_df = pd.read_excel('CreditConsumptionData.xlsx')

# Display data selection for each dataframe
print("\n" + "------------------------Data Selection-----------------------------" + "\n")
print(" CustomerDemographics:")
print(demographics_df.head(20))  # Display first 20 rows
print("\n" + "-----------------------------------------------------" + "\n")
print("CustomerBehaviorData:")
print(behavior_df.head(20))  # Display first 20 rows
print("\n" + "-----------------------------------------------------" + "\n")
print(" CreditConsumptionData:")
print(consumption_df.head(20))  # Display first 20 rows
print("\n" + "-----------------------------------------------------" + "\n")

# Check for null values before handling them
print("\n" + "------------------------Data Preprocessing-----------------------------" + "\n")
print("\n" + "------------- Before handling null values ------------" + "\n")
print(" CustomerDemographics:")
print(demographics_df.isnull().sum())
print("\n" + "-----------------------------------------------------" + "\n")
print("CustomerBehaviorData:")
print(behavior_df.isnull().sum())
print("\n" + "-----------------------------------------------------" + "\n")
print("CreditConsumptionData:")
print(consumption_df.isnull().sum())
print("\n" + "-----------------------------------------------------" + "\n")

# Handling null values
demographics_df.fillna(0, inplace=True)
behavior_df.fillna(0, inplace=True)
consumption_df.fillna(0, inplace=True)

# Check for null values after handling them
print("\n" + "------------- After handling null values ------------" + "\n")
print(" CustomerDemographics:")
print(demographics_df.isnull().sum())
print("\n" + "-----------------------------------------------------" + "\n")
print("CustomerBehaviorData:")
print(behavior_df.isnull().sum())
print("\n" + "-----------------------------------------------------" + "\n")
print("CreditConsumptionData:")
print(consumption_df.isnull().sum())
print("\n" + "-----------------------------------------------------" + "\n")

# Apply label encoding to categorical variables
print("\n" + "------------------------Label Encoding-----------------------------" + "\n")

label_encoder = LabelEncoder()

# Ensure that all categorical columns contain only string values
for col in ['gender', 'account_type', 'loan_enq']:
    if col in demographics_df.columns:
        demographics_df[col] = demographics_df[col].astype(str)
    if col in behavior_df.columns:
        behavior_df[col] = behavior_df[col].astype(str)

# Apply label encoding
for col in ['gender', 'account_type', 'loan_enq']:
    if col in demographics_df.columns:
        demographics_df[col] = label_encoder.fit_transform(demographics_df[col])
    if col in behavior_df.columns:
        behavior_df[col] = label_encoder.fit_transform(behavior_df[col])

# Display encoded data
print("Encoded CustomerDemographics:")
print(demographics_df.head(20))
print("\n")
print("Encoded CustomerBehaviorData:")
print(behavior_df.head(20))
print("\n")
print("CreditConsumptionData:")
print(consumption_df.head(20))
print("\n")
# Merge datasets based on the ID column
merged_data = pd.merge(demographics_df[['ID', 'Income', 'age', 'gender','account_type']], 
                       behavior_df[['ID', 'credit_amount_apr', 'credit_count_apr', 'debit_count_apr',
                                    'max_credit_amount_apr', 'debit_amount_may', 'credit_amount_may',
                                    'credit_count_may', 'debit_count_may', 'debit_amount_jun', 
                                    'credit_amount_jun', 'credit_count_jun', 'debit_count_jun']], 
                       on='ID')

merged_data = pd.merge(merged_data, consumption_df[['ID', 'cc_cons']], on='ID')

# Display the merged dataset with selected features
print("Merged Data:")
print(merged_data.head())

# Save merged data as CSV
merged_data.to_csv('merged_data.csv', index=False)

import pandas as pd
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt

# Load merged dataset
merged_data = pd.read_csv('merged_data.csv')

# Display basic information about the dataset
print("Dataset info:")
print(merged_data.info())

# Display summary statistics
print("\nSummary statistics:")
print(merged_data.describe())

# Check for missing values
print("\nMissing values:")
print(merged_data.isnull().sum())

# Handle missing values
merged_data.fillna(0, inplace=True)

# Apply label encoding to 'Income' column
label_encoder = LabelEncoder()
merged_data['Income'] = label_encoder.fit_transform(merged_data['Income'])

# Visualize the distribution of target variable 'cc_cons'
plt.figure(figsize=(8, 6))
sns.histplot(merged_data['cc_cons'], bins=30, kde=True)
plt.title('Distribution of Credit Card Consumption')
plt.xlabel('Credit Card Consumption')
plt.ylabel('Frequency')
plt.show()

# Visualize correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(merged_data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

# Pairplot for selected numerical features
selected_features = ['Income', 'age', 'credit_amount_may', 'credit_amount_jun', 'cc_cons']
sns.pairplot(merged_data[selected_features], diag_kind='kde')
plt.suptitle('Pairplot of Selected Numerical Features')
plt.show()

# Boxplot for categorical variables against target 'cc_cons'
categorical_features = ['gender', 'account_type']
for feature in categorical_features:
    plt.figure(figsize=(8, 6))
    sns.boxplot(x=feature, y='cc_cons', data=merged_data)
    plt.title(f'Boxplot of cc_cons by {feature}')
    plt.xlabel(feature)
    plt.ylabel('cc_cons')
    plt.show()


from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np
label_encoder = LabelEncoder()
# merged_data['gender'] = label_encoder.fit_transform(merged_data['gender'])
merged_data['Income'] = label_encoder.fit_transform(merged_data['Income'])

# Features and target variable
X = merged_data.drop(columns=['cc_cons'])
y = merged_data['cc_cons']

# Display the shapes of X and y
print("Shape of X (features):", X.shape)
print("Shape of y (target variable):", y.shape)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Display the sizes of training and testing sets
print("\nSize of X_train:", X_train.shape)
print("Size of y_train:", y_train.shape)
print("Size of X_test:", X_test.shape)
print("Size of y_test:", y_test.shape)

# Train the model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE: {rmse:.2f}")

def calculate_rmpse(actual, predicted):
    rmspe = np.sqrt(np.mean(np.square((actual - predicted) / actual)))
    return rmspe * 100

rmpse = calculate_rmpse(y_test, y_pred)
print(f"RMPSE: {rmpse:.2f}%")

# User Input for April, May, and June
# User Input for all features
print("\nEnter the following features:")
income = float(input("Income: "))
age = int(input("Age: "))
gender = input("Gender (Male/Female): ").capitalize()
account_type = input("Account Type (Savings/Current): ").capitalize()
credit_amount_apr = float(input("Credit Amount for April: "))
credit_count_apr = int(input("Credit Count for April: "))
debit_count_apr = int(input("Debit Count for April: "))
max_credit_amount_apr = float(input("Max Credit Amount for April: "))
debit_amount_may = float(input("Debit Amount for May: "))
credit_amount_may = float(input("Credit Amount for May: "))
credit_count_may = int(input("Credit Count for May: "))
debit_count_may = int(input("Debit Count for May: "))
debit_amount_jun = float(input("Debit Amount for June: "))
credit_amount_jun = float(input("Credit Amount for June: "))
credit_count_jun = int(input("Credit Count for June: "))
debit_count_jun = int(input("Debit Count for June: "))

# Create a DataFrame with user input
user_data = pd.DataFrame({'Income': [income], 'age': [age], 'gender': [gender],
                          'account_type': [account_type], 'credit_amount_apr': [credit_amount_apr],
                          'credit_count_apr': [credit_count_apr], 'debit_count_apr': [debit_count_apr],
                          'max_credit_amount_apr': [max_credit_amount_apr],
                          'debit_amount_may': [debit_amount_may], 'credit_amount_may': [credit_amount_may],
                          'credit_count_may': [credit_count_may], 'debit_count_may': [debit_count_may],
                          'debit_amount_jun': [debit_amount_jun], 'credit_amount_jun': [credit_amount_jun],
                          'credit_count_jun': [credit_count_jun], 'debit_count_jun': [debit_count_jun]})

# Load the trained model
model = RandomForestRegressor()
model.fit(merged_data.drop(columns=['cc_cons']), merged_data['cc_cons'])

# Predict the average credit consumption for the next three months
prediction = model.predict(user_data)
print(f"\nPredicted average credit consumption for the next three months: {prediction[0]:.2f}")




-----------------------------------------------------------------------------------

# -*- coding: utf-8 -*-
"""
Created on Fri Mar 29 21:41:27 2024

@author: SHAKTHIVEL R
"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn.preprocessing import LabelEncoder
import pandas as pd

# Load merged dataset
merged_data = pd.read_csv('merged_data.csv')

# Apply label encoding to 'Income' column
label_encoder = LabelEncoder()
merged_data['Income'] = label_encoder.fit_transform(merged_data['Income'])

# Features and target variable
X = merged_data.drop(columns=['cc_cons'])
y = merged_data['cc_cons']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Root Mean Squared Error (RMSE)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE: {rmse:.2f}")

# Define a function to calculate RMPSE
def calculate_rmpse(actual, predicted):
    rmspe = np.sqrt(np.mean(np.square((actual - predicted) / actual)))
    return rmspe * 100

# Calculate RMPSE
rmpse = calculate_rmpse(y_test, y_pred)
print(f"RMPSE: {rmpse:.2f}%")

# User Input for all features
print("\nEnter the following features:")
income = float(input("Income: "))
age = int(input("Age: "))
gender = input("Gender (Male/Female): ").capitalize()
account_type = input("Account Type (Savings/Current): ").capitalize()
credit_amount_apr = float(input("Credit Amount for April: "))
credit_count_apr = int(input("Credit Count for April: "))
debit_count_apr = int(input("Debit Count for April: "))
max_credit_amount_apr = float(input("Max Credit Amount for April: "))
debit_amount_may = float(input("Debit Amount for May: "))
credit_amount_may = float(input("Credit Amount for May: "))
credit_count_may = int(input("Credit Count for May: "))
debit_count_may = int(input("Debit Count for May: "))
debit_amount_jun = float(input("Debit Amount for June: "))
credit_amount_jun = float(input("Credit Amount for June: "))
credit_count_jun = int(input("Credit Count for June: "))
debit_count_jun = int(input("Debit Count for June: "))

# Create a DataFrame with user input
user_data = pd.DataFrame({'Income': [income], 'age': [age], 'gender': [gender],
                          'account_type': [account_type], 'credit_amount_apr': [credit_amount_apr],
                          'credit_count_apr': [credit_count_apr], 'debit_count_apr': [debit_count_apr],
                          'max_credit_amount_apr': [max_credit_amount_apr],
                          'debit_amount_may': [debit_amount_may], 'credit_amount_may': [credit_amount_may],
                          'credit_count_may': [credit_count_may], 'debit_count_may': [debit_count_may],
                          'debit_amount_jun': [debit_amount_jun], 'credit_amount_jun': [credit_amount_jun],
                          'credit_count_jun': [credit_count_jun], 'debit_count_jun': [debit_count_jun]})

# Predict the average credit consumption for the next three months
prediction = model.predict(user_data)
print(f"\nPredicted average credit consumption for the next three months: {prediction[0]:.2f}")


-------------------------------------------------------------------------------------------------


# Create a DataFrame with user input (excluding 'ID' column)
user_data = pd.DataFrame({'Income': [income], 'age': [age], 'gender': [gender],
                          'account_type': [account_type], 'credit_amount_apr': [credit_amount_apr],
                          'credit_count_apr': [credit_count_apr], 'debit_count_apr': [debit_count_apr],
                          'max_credit_amount_apr': [max_credit_amount_apr],
                          'debit_amount_may': [debit_amount_may], 'credit_amount_may': [credit_amount_may],
                          'credit_count_may': [credit_count_may], 'debit_count_may': [debit_count_may],
                          'debit_amount_jun': [debit_amount_jun], 'credit_amount_jun': [credit_amount_jun],
                          'credit_count_jun': [credit_count_jun], 'debit_count_jun': [debit_count_jun]})

# Predict the average credit consumption for the next three months
prediction = model.predict(user_data.drop(columns=['ID']))  # Exclude 'ID' column
print(f"\nPredicted average credit consumption for the next three months: {prediction[0]:.2f}")















