package ecdh;

import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.jce.interfaces.ECPrivateKey;
import org.bouncycastle.jce.interfaces.ECPublicKey;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import javax.crypto.KeyAgreement;
import java.security.*;
import java.math.BigInteger;
import java.util.Scanner;
import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;
import org.bouncycastle.math.ec.ECCurve;

public class ECDHDemo21 {
    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        Scanner scanner = new Scanner(System.in);

        // Input curve parameters
        System.out.println("Enter the prime field (p): ");
        String pValue = scanner.nextLine();

        System.out.println("Enter the coefficient 'a' of the curve: ");
        String aValue = scanner.nextLine();

        System.out.println("Enter the coefficient 'b' of the curve: ");
        String bValue = scanner.nextLine();

        System.out.println("Enter the order of the base point (n): ");
        String nValue = scanner.nextLine();

        System.out.println("Enter the x-coordinate of the base point (Gx): ");
        String gxValue = scanner.nextLine();

        System.out.println("Enter the y-coordinate of the base point (Gy): ");
        String gyValue = scanner.nextLine();

        // Convert String inputs to corresponding types
        BigInteger p = new BigInteger(pValue);
        BigInteger a = new BigInteger(aValue);
        BigInteger b = new BigInteger(bValue);
        BigInteger n = new BigInteger(nValue);
        BigInteger gx = new BigInteger(gxValue);
        BigInteger gy = new BigInteger(gyValue);

        // Create custom curve parameter specification
        ECCurve curve = new ECCurve.Fp(p, a, b);
        org.bouncycastle.math.ec.ECPoint generator = curve.createPoint(gx, gy);
        BigInteger cofactor = BigInteger.ONE; // Change cofactor here
        ECNamedCurveParameterSpec customSpec = new ECNamedCurveParameterSpec(
                "custom", // Curve nameyy
                curve, // Curve
                generator, // Base point (generator)
                n, // Order of the base point
                cofactor // Co-factor
        );

        // Generate Alice's key pair
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("ECDH", "BC");
        keyGen.initialize(customSpec, new SecureRandom());
        KeyPair aliceKeyPair = keyGen.generateKeyPair();

        // Generate Bob's key pair
        KeyPair bobKeyPair = keyGen.generateKeyPair();

        // Alice's private key and Bob's public key
        ECPrivateKey alicePrivateKey = (ECPrivateKey) aliceKeyPair.getPrivate();
        ECPublicKey bobPublicKey = (ECPublicKey) bobKeyPair.getPublic();

        // Bob's private key and Alice's public key
        ECPrivateKey bobPrivateKey = (ECPrivateKey) bobKeyPair.getPrivate();
        ECPublicKey alicePublicKey = (ECPublicKey) aliceKeyPair.getPublic();

        // Print Alice's public and private keys
        System.out.println("Alice's Public Key: " + alicePublicKey);
        System.out.println("Alice's Private Key: " + alicePrivateKey);

        // Print Bob's public and private keys
        System.out.println("Bob's Public Key: " + bobPublicKey);
        System.out.println("Bob's Private Key: " + bobPrivateKey);

        // Key agreement
        KeyAgreement aliceKeyAgreement = KeyAgreement.getInstance("ECDH");
        aliceKeyAgreement.init(alicePrivateKey);
        aliceKeyAgreement.doPhase(bobPublicKey, true);
        byte[] aliceSharedSecret = aliceKeyAgreement.generateSecret();

        KeyAgreement bobKeyAgreement = KeyAgreement.getInstance("ECDH");
        bobKeyAgreement.init(bobPrivateKey);
        bobKeyAgreement.doPhase(alicePublicKey, true);
        byte[] bobSharedSecret = bobKeyAgreement.generateSecret();

        // Check if the shared secrets are the same
        if (MessageDigest.isEqual(aliceSharedSecret, bobSharedSecret)) {
            System.out.println("Shared secrets match!");
            System.out.println("Shared Secret (Hexadecimal): " + bytesToHex(aliceSharedSecret));
        } else {
            System.out.println("Shared secrets do not match!");
        }
    }

    // Utility method to convert bytes to hexadecimal string
    private static String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02X", b));
        }
        return result.toString();
    }
}
